{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","newsquares","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kMAwBA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACzCF,EAAMG,O,IAKLC,E,qLAEWC,GAAI,IAAD,OACZ,OACI,kBAACN,EAAD,CACAI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAU,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAMnC,OAEI,6BACA,yBAAKJ,UAAU,aACdK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEnB,yBAAKP,UAAU,aACdK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEnB,yBAAKP,UAAU,aACdK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA5BfC,IAAMC,WAmCZC,E,YACF,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPE,E,yEAWPZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAIZ,KAAKM,MAAMI,WAAa,GAE/DG,EADUN,EAAQA,EAAQO,OAAS,GACdb,QAAQW,QAE9BG,EAAgBF,IAAeA,EAAWd,KAE/Cc,EAAWd,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IAC3CX,KAAKgB,SAAU,CACXT,QAAUA,EAAQU,OAAO,CAAC,CACtBhB,QAAUY,KAEdF,SAAWX,KAAKM,MAAMK,QACtBD,WAAaH,EAAQO,Y,6BAItBI,GACHlB,KAAKgB,SAAU,CACXN,WAAYQ,EACZP,QAAWO,EAAO,IAAO,M,+BAIvB,IAcEC,EAdH,OACCZ,EAAUP,KAAKM,MAAMC,QACrBa,EAAUb,EAAQP,KAAKM,MAAMI,YAC7BW,EAASN,EAAgBK,EAAQnB,SAEjCqB,EAAQf,EAAQgB,KAAK,SAACL,EAAOM,GAC/B,IAAMC,EAAOD,EAAO,oBAAoBA,EAAO,cAC/C,OACI,wBAAIE,IAAKF,GACT,4BAAQ5B,QAAS,kBAAM,EAAK+B,OAAOH,KAAQC,OAU/C,OAJgBN,EAAXE,EAAqBA,EAAS,cACnB,iBAAmBrB,KAAKM,MAAMK,QAAU,IAAM,KAI1D,yBAAKhB,UAAU,QACf,yBAAKA,UAAU,cACf,kBAACG,EAAD,CACAG,QAASmB,EAAQnB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK6B,YAAY7B,OAGjC,yBAAKJ,UAAU,aACf,6BAAMwB,GACN,4BAAKG,S,GAjEFnB,IAAMC,WAwEjB,SAASW,EAAgBd,GAWrB,IAVA,IAAM4B,EAAQ,CACV,CAAC,EAAI,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF9B,EAAI,EAAIA,EAAI8B,EAAMf,OAASf,IAAM,CAAC,IAAD,cAClB8B,EAAM9B,GADY,GAC/B+B,EAD+B,KAC3BC,EAD2B,KACvBC,EADuB,KAEtC,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GAClE,OAAO/B,EAAQ6B,GAIvB,OAAO,KAKXG,IAASC,OACL,kBAAC7B,EAAD,MACA8B,SAASC,eAAe,U","file":"static/js/main.cd637c05.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// class Square extends React.Component {\r\n//     // constructor(props) {\r\n//     //     super(props) ; \r\n//     //     this.state = {\r\n//     //         value: null ,\r\n//     //     };\r\n//     // }\r\n\r\n//     render() {\r\n//         return (\r\n//             <button \r\n//             className=\"square\" \r\n//             onClick={() => { this.props.onClick() } }  \r\n//             >\r\n//             {this.props.value}\r\n//             </button>\r\n//             );\r\n//         }\r\n//     }\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n        </button>\r\n        );\r\n    }\r\n    \r\n    class Board extends React.Component {\r\n        \r\n        renderSquare(i) {\r\n            return (\r\n                <Square \r\n                value={this.props.squares[i]}\r\n                onClick={ () => this.props.onClick(i) } \r\n                />\r\n                );\r\n            }   \r\n            \r\n            render() {\r\n                return (\r\n                    \r\n                    <div>\r\n                    <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                    </div>\r\n                    <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                    </div>\r\n                    <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                    </div>\r\n                    </div>\r\n                    );\r\n                }\r\n            }\r\n            \r\n            class Game extends React.Component {\r\n                constructor(props) {\r\n                    super(props) ;\r\n                    this.state = {\r\n                        history: [{\r\n                            squares: Array(9).fill(null) , \r\n                        }],\r\n                        stepNumber: 0,\r\n                        xIsNext: true,\r\n                    };\r\n                }\r\n                \r\n                handleClick(i) {\r\n                    const history = this.state.history.slice(0 , this.state.stepNumber + 1 )  ; \r\n                    const current = history[history.length - 1 ] ; \r\n                    const newsquares = current.squares.slice() ; \r\n                    \r\n                    if ( calculateWinner(newsquares) || newsquares[i] ) return ; \r\n                    \r\n                    newsquares[i] = this.state.xIsNext ? 'X' : 'O' ;\r\n                    this.setState( { \r\n                        history : history.concat([{\r\n                            squares : newsquares \r\n                        }]),\r\n                        xIsNext : !this.state.xIsNext ,\r\n                        stepNumber : history.length,\r\n                    } ) ; \r\n                    \r\n                }\r\n                jumpTo(step) {\r\n                    this.setState( {\r\n                        stepNumber: step,\r\n                        xIsNext : (step % 2) === 0 ,\r\n                    });\r\n                }\r\n                \r\n                render() {\r\n                    const history = this.state.history ;\r\n                    const current = history[this.state.stepNumber];\r\n                    const winner = calculateWinner(current.squares) ; \r\n                    \r\n                    const moves = history.map( (step , move) => {\r\n                        const desc = move ? 'Go back to round '+move : 'Start again' ; \r\n                        return (\r\n                            <li key={move}>\r\n                            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                            </li>\r\n                            );\r\n                        });\r\n                        \r\n                        let status ;\r\n                        if ( winner ) { status =  winner + ' has won ! ' ;}\r\n                        else { status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O' ) ;  }\r\n                        \r\n                        \r\n                        return (\r\n                            <div className=\"game\">\r\n                            <div className=\"game-board\">\r\n                            <Board \r\n                            squares={current.squares}\r\n                            onClick={(i) => this.handleClick(i)}\r\n                            />\r\n                            </div>\r\n                            <div className=\"game-info\">\r\n                            <div>{status}</div>\r\n                            <ol>{moves}</ol>\r\n                            </div>\r\n                            </div>\r\n                            );\r\n                        }\r\n                    }\r\n                    \r\n                    function calculateWinner(squares) {\r\n                        const lines = [\r\n                            [0 , 1 ,2] , \r\n                            [3, 4, 5],\r\n                            [6, 7, 8],\r\n                            [0, 3, 6],\r\n                            [1, 4, 7],\r\n                            [2, 5, 8],\r\n                            [0, 4, 8],\r\n                            [2, 4, 6],\r\n                        ];\r\n                        for( let i = 0 ; i < lines.length ; i++ ) {\r\n                            const [a , b , c] = lines[i] ; \r\n                            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                                return squares[a];\r\n                            }\r\n                            \r\n                        }\r\n                        return null;\r\n                    }\r\n                    \r\n                    // ========================================\r\n                    \r\n                    ReactDOM.render(\r\n                        <Game />,\r\n                        document.getElementById('root')\r\n                        );\r\n                        \r\n"],"sourceRoot":""}